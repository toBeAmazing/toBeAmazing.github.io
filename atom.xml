<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JollyFly&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-07T08:47:10.511Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JollyFly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql学习与总结</title>
    <link href="http://yoursite.com/2017/07/07/mysql/"/>
    <id>http://yoursite.com/2017/07/07/mysql/</id>
    <published>2017-07-07T07:23:48.000Z</published>
    <updated>2017-07-07T08:47:10.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-数据库范式"><a href="#1-数据库范式" class="headerlink" title="1.数据库范式"></a>1.数据库范式</h3><ol>
<li>第一范式（1NF）：<blockquote>
<p>第一范式强调的是列的原子性，即列不能够再分成其他几列。</p>
</blockquote>
</li>
<li>第二范式（2NF）：<blockquote>
<p>首先要满足第一范式的要求，另外包含两部分内容，一是表必须有主键；<br>二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。<br>例如一个订单明细表（OrderId，ProductId，Quantity，UnitPrice）<br><br>在这张表中，单单通过一个OrderId是不足以成为主键的，主键应该是（OrderId,ProductId）<br>可以将表拆分为（OrderId,ProductId,Quantity）和（ProductId,UnitPrice）</p>
</blockquote>
</li>
<li>第三范式（3NF）：<blockquote>
<p>首先是要满足2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列B依赖于主键的情况。<br><br>例如一个订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID）。<br>其中 OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity 等非主键列都完全依赖于主键（OrderID），所以符合 2NF。不过问题是 CustomerName，CustomerAddr，CustomerCity 直接依赖的是 CustomerID（非主键列），而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合 3NF。<br>通过拆分【Order】为【Order】（OrderID，OrderDate，CustomerID）和【Customer】（CustomerID，CustomerName，CustomerAddr，CustomerCity）从而达到 3NF。</p>
</blockquote>
</li>
</ol>
<h3 id="2-索引基础"><a href="#2-索引基础" class="headerlink" title="2.索引基础"></a>2.索引基础</h3><h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h4><blockquote>
<p>B-Tree索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，<br>取而代之的是从索引的根节点(图示并未画出)开始进行搜索。根节点的槽中存放了指向子节点的指针，<br>存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层<br>子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么是找到对应的值，要么<br>该记录不存在。<br><br>索引对多个值进行排序的依据是CREATE TABLE语句中定义索引时列的顺序。<br>例：假设有如下数据表：<br>CREATE TABLE People(<br>    last_name  varchar(50)   not null,<br>    first_name varchar(50)   not null,<br>    dob        date             not null,<br>    gender       enum(‘m’,’f’) not null,<br>    key(last_name, first_name, dob)<br>);</p>
</blockquote>
<p>对于表中的每一行数据，索引中包含了last_name,first_name和dob列的值。<br>可以使用B-Tree索引的查询类型。B-Tree索引适用于全键值、键值范围或键前缀查找。其中键前缀查找<br>只适用于根据最左前缀的查找。上面所述的索引对如下类型的查询有效。</p>
<ol>
<li>全值匹配<br><br>全值匹配指的是和索引中的所有列进行匹配，例如前面提到的索引可用于查找姓名为 Cuba Allen、<br>出生于1960-01-01的人。</li>
<li>匹配最左前缀(last_name)<br><br>前面提到的索引可用于查找所有姓为Allen的人，即只使用索引的第一列。</li>
<li>匹配列前缀<br><br>也可以只匹配某一列的值的开头部分。例如前面提到的索引可用于查找所有以J开<br>头的姓的人。<br>这里也只使用了索引的第一列。</li>
<li>匹配范围值<br><br>例如前面提到的索引可用于查找姓在Allen和Barrymore之间的人，这里也只使<br>用了索引的第一列。</li>
<li>精确匹配某一列并范围匹配另外一列<br><br>前面提到的索引也可用于查找所有姓为Allen，并且名字是字母K开头的人。</li>
<li>只访问索引的查询<br><br>B-Tree通常可以支持”只访问索引的查询”，即查询只需要访问索引，<br>而无须访问数据行。</li>
</ol>
<h5 id="B-Tree索引的限制："><a href="#B-Tree索引的限制：" class="headerlink" title="B-Tree索引的限制："></a>B-Tree索引的限制：</h5><ol>
<li>如果不是按照索引的最左列开始查找，则无法使用索引。</li>
<li>不能跳过索引中的列。</li>
<li>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找。</li>
</ol>
<h5 id="典型优化："><a href="#典型优化：" class="headerlink" title="典型优化："></a>典型优化：</h5><blockquote>
<p>使用B-Tree存储URL，因为URL一般比较长，因此数据量大的时候，查询会变得缓<br> 慢。若删除原来URL列上的索引，而新增一个被索引的url_crc列，使用CRC32做<br> 哈希，就可以使用下面的方式查询：</p>
</blockquote>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> #原查询语句：</div><div class="line">   SELECT id FROM url WHERE url='http://www.mysql.com';</div><div class="line">#修改后的语句：</div><div class="line">   SELECT id FROM url WHERE url='http://www.mysql.com'</div><div class="line">                 AND url_crc=CRC32('http://www.mysql.com');</div></pre></td></tr></table></figure>
<blockquote>
<p>这样做的性能会非常高，因为MySQL优化器会使用这个选择性很高而体积很小的基于url_crc列的索引<br>来完成查找。即使有多个记录有相同的索引值，查找仍然很快，只需要根据哈希值做快速的整数比较就能<br>找到索引条目，然后一一比较返回对应的行。可以使用触发器来维护哈希值，例：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#创建表</div><div class="line">    CREATE TABLE pseudohash(</div><div class="line">        id int unsigned NOT NULL auto_increment,</div><div class="line">        url varchar(255) NOT NULL,</div><div class="line">        url_crc int unsigned NOT NULL DEFAULT 0,</div><div class="line">        PRIMARY KEY(id);</div><div class="line">    );</div><div class="line">#创建触发器</div><div class="line">    CREATE TRIGGER pseudohash_crc_ins BEFORE INSERT ON pseudohash FOR EACH ROW BEGIN</div><div class="line">    SET NEW.url_crc=CRC32(NEW.url);</div><div class="line">    END;</div><div class="line"></div><div class="line">    CREATE TRIGGER pseudohash_crc_ins BEFORE UPDATE ON pseudohash FOR EACH ROW BEGIN</div><div class="line">    SET NEW.url_crc=CRC32(NEW.url);</div><div class="line">    END;</div></pre></td></tr></table></figure>
<p> #####高性能的索引使用策略</p>
<ol>
<li><p>独立的列</p>
<blockquote>
<p>一些不恰当的查询会使MySQL无法使用已有的索引，如果查询中的列不是独立的<br>列，则MySQL就不会使用索引。“独立的列”是指索引列不能是表达式的一部分，<br>也不能是函数的参数。例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> actor_id <span class="keyword">FROM</span> sakila.actor</div><div class="line">    <span class="keyword">WHERE</span> actor_id + <span class="number">1</span> = <span class="number">5</span>;</div></pre></td></tr></table></figure>
</blockquote>
<p>凭肉眼就能看出WHERE中的表达式其实等价于actor_id = 4，但是MySQL无法自<br>动解析这个方程式。另一个常见的错误：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> ... <span class="keyword">WHERE</span> <span class="keyword">TO_DAYS</span>(<span class="keyword">CURRENT_DATE</span>)</div><div class="line">    - <span class="keyword">TO_DAYS</span>(date_col) &lt;= <span class="number">10</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>前缀索引和索引选择性</p>
<blockquote>
<p>如果索引列的字符串很长，索引会变得大且慢。通常可以索引开始部分的字符，这样可以大大节约索引<br>空间，从而提高索引效率。但这样也会降低索引的选择性。对于BLOB、TEXT或者很长的VARCHAR类型的列，<br>必须使用前缀索引，因为MySQL不允许索引这些列完整的长度。创建索引的SQL:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sakila.city_demo <span class="keyword">ADD</span> <span class="keyword">KEY</span> (city(<span class="number">7</span>));</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>多列索引</p>
<blockquote>
<p>很多人对多列索引的理解都不够，一个常见的错误就是，为每个列创建独立的索引，或者按照错误的<br>顺序创建多列索引。</p>
<ul>
<li>当出现服务器对多个索引做相交操作时(通常有多个AND条件)，通常意味着需要一个包含所有相关<br>列的多列索引，而不是多个独立的单列索引。</li>
<li>当服务器需要对多个索引做联合操作时(通常有多个OR条件)，通常需要消耗大量的CPU和内存资源<br>在算法的缓存、排序和合并操作上。特别是当其中有些索引的选择性不高，需要合并扫描返回的大量<br>数据的时候。</li>
</ul>
</blockquote>
</li>
<li>重复索引：<br>&gt;<ol>
<li>主键列和唯一列，不需要再创建索引，因为MySQL的主键限制和唯一限制都是通过索引来实现的。</li>
<li>如果创建了索引(A,B),再创建索引(A)就是冗余索引。因为索引(A,B)也可以当作索引(A)来使用。</li>
</ol>
</li>
</ol>
<h3 id="3-EXPLAN"><a href="#3-EXPLAN" class="headerlink" title="3.EXPLAN"></a>3.EXPLAN</h3><blockquote>
<p>在MySQL中可以使用EXPLAN查看SQL执行计划，用法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>####3.1结果说明</p>
<ol>
<li>id<br><br> SELECT识别符。这是SELECT查询序列号。这个不重要。</li>
<li>select_type<br><br> 表示SELECT语句的类型，有以下几种值：<ol>
<li>SIMPLE<br><br>表示简单查询，其中不包含连接查询和子查询。</li>
<li>PRIMARY<br><br>表示主查询，或者是最外面的查询语句。</li>
<li>UNION<br><br>表示连接查询的第2个或后面的查询语句。</li>
<li>DEPENDENT UNION<br><br>UNION中的第二个或后面的SELECT语句，取决于外面的查询。</li>
<li>UNION RESULT<br>连接查询的结果</li>
<li>SUBQUERY<br>子查询中的第1个SELECT语句。</li>
<li>DEPENDENT SUBQUERY<br>子查询中的第1个SELECT语句，取决于外面的查询。</li>
<li>DERIVED<br>SELECT(FROM 子句的子查询)。</li>
</ol>
</li>
<li>type(重要)<ol>
<li>system<br><br>表仅有一行，这是const类型的特列，平时不会出现，这个也可以忽略不计。</li>
<li>const<br><br>数据表最多只有一个匹配行，因为只匹配一行数据，所以很快，常用于PRIMARY KEY或者UNIQUE<br>索引的查询，可理解为const是最优化的。</li>
<li>eq_ref<br><br>mysql手册是这样说的:”对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的<br>联接类型，除了const类型。它用在一个索引的所有部分被联接使用并且索引是UNIQUE或PRIMARY KEY”。eq_ref可以用于使用=比较带索引的列。</li>
<li>ref<br><br>查询条件索引既不是UNIQUE也不是PRIMARY KEY的情况。ref可用于=或&lt;或&gt;操作符的带索引的列。</li>
<li>ref_or_null<br><br>该联接类型如同ref，但是添加了MySQL可以专门搜索包含NULL值的行。在解决子查询中经常使用<br>该联接类型的优化。<br><br><strong>上面这五种情况都是很理想的索引使用情况。</strong><br></li>
<li>index_merge<br><br>该联接类型表示使用了索引合并优化方法。在这种情况下，key列包含了使用的索引的清单，<br>key_len包含了使用的索引的最长的关键元素。</li>
<li>unique_subquery<br><br>该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM<br>single_table WHERE some_expr)<br><br>unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。</li>
<li>index_subquery<br><br>该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一<br>索引: value IN (SELECT key_column FROM single_table WHERE some_expr)</li>
<li>range<br><br>只检索给定范围的行,使用一个索引来选择行。</li>
<li>index<br><br>该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</li>
<li>ALL<br><br>对于每个来自于先前的表的行组合,进行完整的表扫描。（性能最差）</li>
</ol>
</li>
<li>table<br><br> 输出的行所引用的表。</li>
<li>possible_keys<br><br> 指出MySQL能使用哪个索引在该表中找到行。如果是空的，没有相关的索引，这时要提高性能，可<br> 通过校验WHERE子句，看是否引用某些字段，或者检查字段是不是适合索引。</li>
<li>key<br><br> 显示MySQL实际决定使用的键。如果没有索引被选择，键是NULL。</li>
<li>key_len<br><br> 显示MySQL决定使用的键的长度。如果键是NULL，长度就是NULL。文档提示特别注意这个值可以得<br> 出一个多重主键里MySQL实际使用了哪一部分。</li>
<li>ref<br><br> 显示哪个字段或常数与key一起被使用。</li>
<li>rows<br><br> 这个数表示MySQL要遍历多少数据才能找到，在innodb上是不准确的。</li>
<li>Extra<br><br>该列包含MySQL解决查询的详细信息<ul>
<li>Distinct：MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。</li>
<li>Not exists：MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。</li>
<li>range checked for each record (index map: #)：MySQL没有发现好的可以使用的索引,<br>但发现如果来自前面的表的列值已知,可能部分索引可以<br>使用。</li>
<li>Using filesort：MySQL需要额外的一次传递,以找出如何按排序顺序检索行。</li>
<li>Using index：从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信<br>息。</li>
<li>Using temporary：为了解决查询,MySQL需要创建一个临时表来容纳结果。</li>
<li>Using where：WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。</li>
<li>Using sort_union(…), Using union(…), Using intersect(…)：这些<br>函数说明如何为index_merge联接类型合并索引扫描。</li>
<li>Using index for group-by：类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或DISTINCT查询的所有列,而<br>不要额外搜索硬盘访问实际的表。</li>
</ul>
</li>
</ol>
<h3 id="4-查询性能优化"><a href="#4-查询性能优化" class="headerlink" title="4.查询性能优化"></a>4.查询性能优化</h3><blockquote>
<p>查询的生命周期：从客户端，到服务器，在服务器上进行解析，生成执行计划，执行，返回结果给客户端。<br>其中”执行“可以认为是最重要的阶段。这其中包括了大量为了检索数据到存储引擎的调用以及调用后的数据<br>处理，包括排序，分组等。<br><br>查询性能低下的最基本原因是访问的数据太多。大部分性能低下的查询都可以通过减少访问的数据量的方式<br>进行优化。对于低效的查询，我们发现通过下面两个步骤来分析总是很有效：</p>
<ol>
<li>确认应用程序是否在检索大量超过需要的数据。这通常意味着访问了太多的行，但有时候也可能是访问了<br>太多的列。</li>
<li>确认MySQL服务器层是否在分析大量超过需要的数据行。</li>
</ol>
</blockquote>
<p>简单的衡量查询开销的三个指标如下：</p>
<ol>
<li>响应时间</li>
<li>扫描的行数</li>
<li>返回的行数</li>
</ol>
<p>这三个指标都会记录到MySQL的慢日志中，所以检查慢日志记录是找出扫描行数过多的查询的好办法。</p>
<blockquote>
<ol>
<li>响应时间<br><br>响应时间分为服务时间和排队时间。服务时间是指数据库处理这个查询真正花了多长时间。排队时间<br>是指服务器因为等待某些资源而没有真正执行查询的时间——可能是等I/O操作完成，也可能是等待行锁，<br>等待。</li>
<li>扫描的行数和返回的行数<br><br>分析查询时，查看该查询扫描的行数是非常有帮助的，这在一定程度上能够说明该查询找到需要的数据<br>的效率高不高。理想情况下扫描的行数和返回的行数应该是相同的。但实际情况这种事并不多。</li>
<li>扫描的行数和访问类型<br><br>在EXPLAIN语句中的type列反应了访问类型，访问类型有很多种，从全表扫描到索引扫描、范围扫描、<br>唯一索查询、常数引用等。这里列的这些，速度是从慢到快。扫描的行数也是从小到大。需要明白扫描<br>表，扫描索引，范围访问和单值访问的概念。</li>
</ol>
</blockquote>
<p>一般MySQL能够使用如下三种方式应用WHERE条件，从好到坏依次为：</p>
<ol>
<li>在索引中使用WHERE条件来过滤不匹配的记录，这是在存储引擎层完成的。</li>
<li>使用索引覆盖扫描(在Extra列中出现了Using index)来返回记录，直接从索引中过滤不需要的记<br>录并返回命中的结果。这是在Mysql服务器层完成的，但无须再回表查询记录。</li>
<li>从数据表中返回数据，然后过滤不满足条件的记录(在Extra列中出现Using Where)。这在MySQL<br>服务器层完成，MySQL需要先从数据表读出记录，然后过滤。</li>
</ol>
<p>如果发现查询需要扫描大量的数据，但只返回少数的行，那么可以尝试下面的方法去优化：</p>
<ol>
<li>使用索引覆盖扫描，把所有需要用的列都放到索引中，这样存储引擎无须回表获取对应行就可以返<br>回结果了。</li>
<li>改变库表结构，例如使用单独的汇总表。</li>
<li>重写这个复杂的查询，让MySQL优化器能够以更优化的方式执行这个查询。</li>
</ol>
<p>在优化有问题的查询时，目标应该是找到一个更优的方法获得实际需要的结果————而不一定总是需要从<br>MySQL获取一模一样的结果集。有时候，可以将查询转换一种写法让其返回一样的结果，但是性能更好。<br>但也可以通过修改应用代码，用另一种方式完成查询，最终达到一样的目的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-数据库范式&quot;&gt;&lt;a href=&quot;#1-数据库范式&quot; class=&quot;headerlink&quot; title=&quot;1.数据库范式&quot;&gt;&lt;/a&gt;1.数据库范式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;第一范式（1NF）：&lt;blockquote&gt;
&lt;p&gt;第一范式强调的是列的原子性，即列不能
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2017/07/07/first/"/>
    <id>http://yoursite.com/2017/07/07/first/</id>
    <published>2017-07-07T06:23:48.000Z</published>
    <updated>2017-07-07T07:49:02.207Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博客，欢迎大家点赞、打赏、订阅、丢香蕉给我</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一篇博客，欢迎大家点赞、打赏、订阅、丢香蕉给我&lt;/p&gt;

    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
